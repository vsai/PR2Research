#!/Users/vishalsai/Documents/ResearchPR2/scikittry/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2013  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import os
import os.path
import audiotools
import audiotools.cue
import audiotools.ui
import audiotools.text as _
import termios


def has_embedded_cuesheet(audiofile):
    return audiofile.get_cuesheet() is not None


def split(progress, source_audiofile, destination_filename,
          destination_class, compression, metadata,
          pcm_frames_offset, total_pcm_frames):
    pcmreader = source_audiofile.to_pcm()

    #if PCMReader has seek(), use it to reduce the amount of frames to skip
    if (hasattr(pcmreader, "seek") and callable(pcmreader.seek)):
        pcm_frames_offset -= pcmreader.seek(pcm_frames_offset)

    destination_audiofile = destination_class.from_pcm(
        str(destination_filename),
        audiotools.PCMReaderProgress(
            audiotools.PCMReaderWindow(pcmreader,
                                       pcm_frames_offset,
                                       total_pcm_frames),
            total_pcm_frames,
            progress),
        compression,
        total_pcm_frames)

    if (metadata is not None):
        destination_audiofile.set_metadata(metadata)

    return str(destination_filename)


if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        usage=_.USAGE_TRACKSPLIT,
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option(
        '-I', '--interactive',
        action='store_true',
        default=False,
        dest='interactive',
        help=_.OPT_INTERACTIVE_OPTIONS)

    parser.add_option(
        '--cue',
        action='store',
        type='string',
        dest='cuesheet',
        metavar='FILENAME',
        help=_.OPT_CUESHEET_TRACKSPLIT)

    parser.add_option(
        '-V', '--verbose',
        action='store',
        dest='verbosity',
        choices=audiotools.VERBOSITY_LEVELS,
        default=audiotools.DEFAULT_VERBOSITY,
        help=_.OPT_VERBOSE)

    conversion = audiotools.OptionGroup(parser, _.OPT_CAT_ENCODING)

    conversion.add_option(
        '-t', '--type',
        action='store',
        dest='type',
        choices=sorted(audiotools.TYPE_MAP.keys() + ['help']),
        help=_.OPT_TYPE)

    conversion.add_option(
        '-q', '--quality',
        action='store',
        type='string',
        dest='quality',
        help=_.OPT_QUALITY)

    conversion.add_option(
        '-d', '--dir',
        action='store',
        type='string',
        dest='dir',
        default='.',
        help=_.OPT_DIR)

    conversion.add_option(
        '--format',
        action='store',
        type='string',
        default=audiotools.FILENAME_FORMAT,
        dest='format',
        help=_.OPT_FORMAT)

    conversion.add_option(
        '-j', '--joint',
        action='store',
        type='int',
        default=audiotools.MAX_JOBS,
        dest='max_processes',
        help=_.OPT_JOINT)

    parser.add_option_group(conversion)

    lookup = audiotools.OptionGroup(parser, _.OPT_CAT_CD_LOOKUP)

    lookup.add_option(
        '--musicbrainz-server', action='store',
        type='string', dest='musicbrainz_server',
        default=audiotools.MUSICBRAINZ_SERVER,
        metavar='HOSTNAME')
    lookup.add_option(
        '--musicbrainz-port', action='store',
        type='int', dest='musicbrainz_port',
        default=audiotools.MUSICBRAINZ_PORT,
        metavar='PORT')
    lookup.add_option(
        '--no-musicbrainz', action='store_false',
        dest='use_musicbrainz',
        default=audiotools.MUSICBRAINZ_SERVICE,
        help=_.OPT_NO_MUSICBRAINZ)

    lookup.add_option(
        '--freedb-server', action='store',
        type='string', dest='freedb_server',
        default=audiotools.FREEDB_SERVER,
        metavar='HOSTNAME')
    lookup.add_option(
        '--freedb-port', action='store',
        type='int', dest='freedb_port',
        default=audiotools.FREEDB_PORT,
        metavar='PORT')
    lookup.add_option(
        '--no-freedb', action='store_false',
        dest='use_freedb',
        default=audiotools.FREEDB_SERVICE,
        help=_.OPT_NO_FREEDB)

    lookup.add_option(
        '-D', '--default',
        dest='use_default', action='store_true', default=False,
        help=_.OPT_DEFAULT)

    parser.add_option_group(lookup)

    metadata = audiotools.OptionGroup(parser, _.OPT_CAT_METADATA)

    metadata.add_option(
        '--album-number',
        dest='album_number',
        action='store',
        type='int',
        default=0,
        help=_.OPT_ALBUM_NUMBER)

    metadata.add_option(
        '--album-total',
        dest='album_total',
        action='store',
        type='int',
        default=0,
        help=_.OPT_ALBUM_TOTAL)

    metadata.add_option(
        '--replay-gain',
        action='store_true',
        dest='add_replay_gain',
        help=_.OPT_REPLAY_GAIN)

    metadata.add_option(
        '--no-replay-gain',
        action='store_false',
        dest='add_replay_gain',
        help=_.OPT_NO_REPLAY_GAIN)

    parser.add_option_group(metadata)

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("tracksplit", options)

    #ensure interactive mode is available, if selected
    if (options.interactive and (not audiotools.ui.AVAILABLE)):
        audiotools.ui.not_available_message(msg)
        sys.exit(1)

    #get the AudioFile class we are converted to
    if (options.type == 'help'):
        audiotools.ui.show_available_formats(msg)
        sys.exit(0)
    if (options.type is not None):
        AudioType = audiotools.TYPE_MAP[options.type]
    else:
        AudioType = audiotools.TYPE_MAP[audiotools.DEFAULT_TYPE]

    #ensure the selected compression is compatible with that class
    if (options.quality == 'help'):
        audiotools.ui.show_available_qualities(msg, AudioType)
        sys.exit(0)
    elif (options.quality is None):
        options.quality = audiotools.__default_quality__(AudioType.NAME)
    elif (options.quality not in AudioType.COMPRESSION_MODES):
        msg.error(_.ERR_UNSUPPORTED_COMPRESSION_MODE %
                  {"quality": options.quality,
                   "type": AudioType.NAME})
        sys.exit(1)

    audiofiles = audiotools.open_files(args, sorted=False, messenger=msg)
    if (len(audiofiles) != 1):
        msg.error(_.ERR_1_FILE_REQUIRED)
        sys.exit(1)
    else:
        audiofile = audiofiles[0]
        input_filename = audiotools.Filename(audiofile.filename)
        input_filenames = set([input_filename])

    base_directory = options.dir
    encoded_filenames = []

    if (options.cuesheet is not None):
        #grab the cuesheet we're using to split tracks
        #(this overrides an embedded cuesheet)
        try:
            cuesheet = audiotools.read_sheet(options.cuesheet)
            input_filenames.add(audiotools.Filename(options.cuesheet))
        except audiotools.SheetException, err:
            msg.error(unicode(err))
            sys.exit(1)
    else:
        if (has_embedded_cuesheet(audiofile)):
            cuesheet = audiofile.get_cuesheet()
        else:
            msg.error(_.ERR_TRACKSPLIT_NO_CUESHEET)
            sys.exit(1)

    if (not cuesheet.image_formatted()):
        msg.error(_.ERR_CUE_INVALID_FORMAT)
        sys.exit(1)

    pcm_lengths = list(cuesheet.pcm_lengths(audiofile.total_frames(),
                                            audiofile.sample_rate()))
    if (pcm_lengths[-1] <= 0):
        msg.error(_.ERR_TRACKSPLIT_OVERLONG_CUESHEET)
        sys.exit(1)

    output_track_count = len(pcm_lengths)

    #use cuesheet to query metadata services for metadata choices
    metadata_choices = audiotools.metadata_lookup(
        first_track_number=1,
        last_track_number=output_track_count,
        offsets=[int((t.index(1).offset() + 2) * 75) for t in
                 cuesheet.tracks()],
        lead_out_offset=audiofile.cd_frames() + 150,
        total_length=audiofile.cd_frames(),
        musicbrainz_server=options.musicbrainz_server,
        musicbrainz_port=options.musicbrainz_port,
        freedb_server=options.freedb_server,
        freedb_port=options.freedb_port,
        use_musicbrainz=options.use_musicbrainz,
        use_freedb=options.use_freedb)

    #populate any empty Album-level metadata fields
    #with those from original file
    album_metadata = audiofile.get_metadata()
    if (album_metadata is not None):
        album_fields = dict([(attr, field) for (attr, field) in
                             album_metadata.filled_fields()
                             if (attr in set(["album_name",
                                              "artist_name",
                                              "performer_name",
                                              "composer_name",
                                              "conductor_name",
                                              "media",
                                              "catalog",
                                              "copyright",
                                              "publisher",
                                              "year",
                                              "date",
                                              "album_number",
                                              "album_total",
                                              "comment"]))])

        for c in metadata_choices:
            for m in c:
                for (attr, field) in m.empty_fields():
                    if (attr in album_fields):
                        setattr(m, attr, album_fields[attr])

    #update MetaData with command-line album-number/total, if given
    if (options.album_number != 0):
        for c in metadata_choices:
            for m in c:
                m.album_number = options.album_number

    if (options.album_total != 0):
        for c in metadata_choices:
            for m in c:
                m.album_total = options.album_total

    #pull ISRC metadata from the cuesheet, if any
    cuesheet_ISRCs = dict([(t.number(), t.ISRC()) for t in cuesheet.tracks()
                           if t.ISRC() is not None])
    for track_metadatas in metadata_choices:
        for metadata in track_metadatas:
            if ((metadata.ISRC is None) and (metadata.track_number in
                                             cuesheet_ISRCs.keys())):
                metadata.ISRC = cuesheet_ISRCs[metadata.track_number].decode(
                    'ascii', 'replace')

    #decide which metadata and output options to use when splitting tracks
    if (options.interactive):
        #pick choice using interactive widget
        output_widget = audiotools.ui.OutputFiller(
            track_labels=[_.LAB_TRACK_X_OF_Y % (i + 1, output_track_count)
                          for i in xrange(output_track_count)],
            metadata_choices=metadata_choices,
            input_filenames=[input_filename for i in
                             xrange(output_track_count)],
            output_directory=options.dir,
            format_string=options.format,
            output_class=AudioType,
            quality=options.quality,
            completion_label=_.LAB_TRACKSPLIT_APPLY)

        loop = audiotools.ui.urwid.MainLoop(
            output_widget,
            audiotools.ui.style(),
            unhandled_input=output_widget.handle_text,
            pop_ups=True)
        try:
            loop.run()
            msg.ansi_clearscreen()
        except (termios.error, IOError):
            msg.error(_.ERR_TERMIOS_ERROR)
            msg.info(_.ERR_TERMIOS_SUGGESTION)
            msg.info(audiotools.ui.xargs_suggestion(sys.argv))
            sys.exit(1)

        if (not output_widget.cancelled()):
            output_tracks = list(output_widget.output_tracks())
        else:
            sys.exit(0)
    else:
        #pick choice without using GUI
        try:
            output_tracks = list(
                audiotools.ui.process_output_options(
                    metadata_choices=metadata_choices,
                    input_filenames=[input_filename for i in
                                     xrange(output_track_count)],
                    output_directory=options.dir,
                    format_string=options.format,
                    output_class=AudioType,
                    quality=options.quality,
                    msg=msg,
                    use_default=options.use_default))
        except audiotools.UnsupportedTracknameField, err:
            err.error_msg(msg)
            sys.exit(1)
        except (audiotools.InvalidFilenameFormat,
                audiotools.OutputFileIsInput,
                audiotools.DuplicateOutputFile), err:
            msg.error(unicode(err))
            sys.exit(1)

    #perform actual track splitting and tagging
    jobs = zip(pcm_lengths, output_tracks)

    if (options.max_processes > 1):
        queue = audiotools.ExecProgressQueue(audiotools.ProgressDisplay(msg))
        pcm_frames_offset = 0

        for (pcm_frames, (output_class,
                          output_filename,
                          output_quality,
                          output_metadata)) in jobs:
            try:
                audiotools.make_dirs(str(output_filename))
            except OSError, err:
                msg.os_error(err)
                sys.exit(1)

            queue.execute(
                function=split,
                progress_text=unicode(output_filename),
                completion_output=
                (_.LAB_ENCODE %
                 {"source": audiotools.Filename(audiofile.filename),
                  "destination": output_filename}),
                source_audiofile=audiofile,
                destination_filename=output_filename,
                destination_class=output_class,
                compression=output_quality,
                metadata=output_metadata,
                pcm_frames_offset=pcm_frames_offset,
                total_pcm_frames=pcm_frames)

            pcm_frames_offset += pcm_frames
        try:
            encoded_tracks = audiotools.open_files(
                queue.run(options.max_processes))
        except audiotools.EncodingError, err:
            msg.error(unicode(err))
            sys.exit(1)

    else:
        total_pcm = audiotools.BufferedPCMReader(audiofile.to_pcm())
        encoded_tracks = []
        for (i, (pcm_frames, (output_class,
                              output_filename,
                              output_quality,
                              output_metadata))) in enumerate(jobs):
            try:
                audiotools.make_dirs(str(output_filename))
            except OSError, err:
                msg.os_error(err)
                sys.exit(1)

            progress = audiotools.SingleProgressDisplay(
                msg, unicode(output_filename))

            try:
                encoded_tracks.append(
                    output_class.from_pcm(
                        str(output_filename),
                        audiotools.PCMReaderProgress(
                            audiotools.LimitedPCMReader(total_pcm, pcm_frames),
                            pcm_frames,
                            progress.update),
                        output_quality,
                        total_pcm_frames=pcm_frames))
            except audiotools.EncodingError, err:
                msg.error(unicode(err))
                sys.exit(1)
            encoded_tracks[-1].set_metadata(output_metadata)
            progress.clear()
            msg.info(
                audiotools.output_progress(
                    u"%s -> %s" % (input_filename, output_filename),
                    i + 1, len(output_tracks)))

    #apply ReplayGain to split tracks, if requested
    if ((audiotools.ADD_REPLAYGAIN and
         (options.add_replay_gain if (options.add_replay_gain is not None)
          else output_class.lossless_replay_gain()) and
         output_class.can_add_replay_gain(encoded_tracks))):
        rg_progress = audiotools.ReplayGainProgressDisplay(
            msg, output_class.lossless_replay_gain())
        rg_progress.initial_message()
        try:
            #separate encoded files by album_name and album_number
            for album in audiotools.group_tracks(encoded_tracks):
                #add ReplayGain to groups of files
                #belonging to the same album

                output_class.add_replay_gain([a.filename for a in album],
                                             rg_progress.update)
        except ValueError, err:
            rg_progress.clear()
            msg.error(unicode(err))
            sys.exit(1)
        rg_progress.final_message()
