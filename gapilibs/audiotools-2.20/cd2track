#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2013  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
import os
import audiotools
import audiotools.ui
import audiotools.accuraterip
import termios
import audiotools.text as _


def limit(l, indexes):
    """given a list and set of indexes (starting from 1)
    returns a new list with only those items"""

    return [item for (index, item) in enumerate(l)
            if ((index + 1) in indexes)]


if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        usage=_.USAGE_CD2TRACK,
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option(
        '-I', '--interactive',
        action='store_true',
        default=False,
        dest='interactive',
        help=_.OPT_INTERACTIVE_OPTIONS)

    parser.add_option(
        '-c', '--cdrom', action='store',
        type='string', dest='cdrom',
        default=audiotools.DEFAULT_CDROM)

    parser.add_option(
        '-s', '--speed', action='store',
        type='int', dest='speed')

    parser.add_option(
        '-V', '--verbose',
        action='store',
        dest='verbosity',
        choices=audiotools.VERBOSITY_LEVELS,
        default=audiotools.DEFAULT_VERBOSITY,
        help=_.OPT_VERBOSE)

    conversion = audiotools.OptionGroup(parser, _.OPT_CAT_EXTRACTION)

    conversion.add_option(
        '-t', '--type',
        action='store',
        dest='type',
        choices=sorted(audiotools.TYPE_MAP.keys() + ['help']),
        default=audiotools.DEFAULT_TYPE,
        help=_.OPT_TYPE)

    conversion.add_option(
        '-q', '--quality',
        action='store',
        type='string',
        dest='quality',
        help=_.OPT_QUALITY)

    conversion.add_option(
        "-d", "--dir", action='store', default='.',
        dest='dir',
        help=_.OPT_DIR)

    conversion.add_option(
        '--format',
        action='store',
        type='string',
        default=audiotools.FILENAME_FORMAT,
        dest='format',
        help=_.OPT_FORMAT)

    parser.add_option_group(conversion)

    lookup = audiotools.OptionGroup(parser, _.OPT_CAT_CD_LOOKUP)

    lookup.add_option(
        '--musicbrainz-server', action='store',
        type='string', dest='musicbrainz_server',
        default=audiotools.MUSICBRAINZ_SERVER,
        metavar='HOSTNAME')
    lookup.add_option(
        '--musicbrainz-port', action='store',
        type='int', dest='musicbrainz_port',
        default=audiotools.MUSICBRAINZ_PORT,
        metavar='PORT')
    lookup.add_option(
        '--no-musicbrainz', action='store_false',
        dest='use_musicbrainz',
        default=audiotools.MUSICBRAINZ_SERVICE,
        help=_.OPT_NO_MUSICBRAINZ)

    lookup.add_option(
        '--freedb-server', action='store',
        type='string', dest='freedb_server',
        default=audiotools.FREEDB_SERVER,
        metavar='HOSTNAME')
    lookup.add_option(
        '--freedb-port', action='store',
        type='int', dest='freedb_port',
        default=audiotools.FREEDB_PORT,
        metavar='PORT')
    lookup.add_option(
        '--no-freedb', action='store_false',
        dest='use_freedb',
        default=audiotools.FREEDB_SERVICE,
        help=_.OPT_NO_FREEDB)

    lookup.add_option(
        '-D', '--default',
        dest='use_default', action='store_true', default=False,
        help=_.OPT_DEFAULT)

    parser.add_option_group(lookup)

    metadata = audiotools.OptionGroup(parser, _.OPT_CAT_METADATA)

    metadata.add_option(
        '--album-number',
        dest='album_number',
        action='store',
        type='int',
        default=0,
        help=_.OPT_ALBUM_NUMBER)

    metadata.add_option(
        '--album-total',
        dest='album_total',
        action='store',
        type='int',
        default=0,
        help=_.OPT_ALBUM_TOTAL)

    #if adding ReplayGain is a lossless process
    #(i.e. added as tags rather than modifying track data)
    #add_replay_gain should default to True
    #if not, add_replay_gain should default to False
    #which is which depends on the track type
    metadata.add_option(
        '--replay-gain',
        action='store_true',
        dest='add_replay_gain',
        help=_.OPT_REPLAY_GAIN)

    metadata.add_option(
        '--no-replay-gain',
        action='store_false',
        dest='add_replay_gain',
        help=_.OPT_NO_REPLAY_GAIN)

    parser.add_option_group(metadata)

    (options, args) = parser.parse_args()

    msg = audiotools.Messenger("cd2track", options)

    #ensure interactive mode is available, if selected
    if (options.interactive and (not audiotools.ui.AVAILABLE)):
        audiotools.ui.not_available_message(msg)
        sys.exit(1)

    #get the default AudioFile class we are converted to
    if (options.type == 'help'):
        audiotools.ui.show_available_formats(msg)
        sys.exit(0)
    else:
        AudioType = audiotools.TYPE_MAP[options.type]

    #ensure the selected compression is compatible with that class
    if (options.quality == 'help'):
        audiotools.ui.show_available_qualities(msg, AudioType)
        sys.exit(0)
    elif (options.quality is None):
        options.quality = audiotools.__default_quality__(AudioType.NAME)
    elif (options.quality not in AudioType.COMPRESSION_MODES):
        msg.error(_.ERR_UNSUPPORTED_COMPRESSION_MODE %
                  {"quality": options.quality,
                   "type": AudioType.NAME})
        sys.exit(1)

    quality = options.quality
    base_directory = options.dir

    try:
        cdda = audiotools.CDDA(options.cdrom, options.speed)
    except IOError, err:
        msg.error(unicode(err) + _.ERR_INVALID_CDDA)
        sys.exit(-1)

    if (len(cdda) == 0):
        msg.error(_.ERR_NO_CDDA)
        sys.exit(1)
    else:
        cd_track_count = len(cdda)

    #use CDDA object to query metadata services for metadata choices
    metadata_choices = cdda.metadata_lookup(
        musicbrainz_server=options.musicbrainz_server,
        musicbrainz_port=options.musicbrainz_port,
        freedb_server=options.freedb_server,
        freedb_port=options.freedb_port,
        use_musicbrainz=options.use_musicbrainz,
        use_freedb=options.use_freedb)

    #update MetaData with command-line album-number/total, if given
    if (options.album_number != 0):
        for c in metadata_choices:
            for m in c:
                m.album_number = options.album_number

    if (options.album_total != 0):
        for c in metadata_choices:
            for m in c:
                m.album_total = options.album_total

    #use CDDA object to perform AccurateRip lookup
    accuraterip_checksums = cdda.accuraterip_lookup()

    #determine tracks to be ripped
    if (len(args) == 0):
        tracks_to_rip = set(range(1, len(cdda) + 1))
    else:
        tracks_to_rip = set([])
        for arg in args:
            try:
                tracks_to_rip.add(int(arg))
            except ValueError:
                continue

    if (len(limit(range(cd_track_count), tracks_to_rip)) == 0):
        #no tracks selected to rip, so do nothing
        sys.exit(0)

    #decide which metadata and output options use when extracting tracks
    if (options.interactive):
        #pick options using interactive widget
        output_widget = audiotools.ui.OutputFiller(
            track_labels=limit([_.LAB_TRACK_X_OF_Y % (i + 1, cd_track_count)
                                for i in xrange(cd_track_count)],
                               tracks_to_rip),
            metadata_choices=[limit(c, tracks_to_rip)
                              for c in metadata_choices],
            input_filenames=limit(
                [audiotools.Filename("track%2.2d.cdda.wav" % (i + 1))
                 for i in xrange(cd_track_count)],
                tracks_to_rip),
            output_directory=options.dir,
            format_string=options.format,
            output_class=AudioType,
            quality=quality,
            completion_label=_.LAB_CD2TRACK_APPLY)

        loop = audiotools.ui.urwid.MainLoop(
            output_widget,
            audiotools.ui.style(),
            unhandled_input=output_widget.handle_text,
            pop_ups=True)
        try:
            loop.run()
            msg.ansi_clearscreen()
        except (termios.error, IOError):
            msg.error(_.ERR_TERMIOS_ERROR)
            msg.info(_.ERR_TERMIOS_SUGGESTION)
            msg.info(audiotools.ui.xargs_suggestion(sys.argv))
            sys.exit(1)

        if (not output_widget.cancelled()):
            output_tracks = list(output_widget.output_tracks())
        else:
            sys.exit(0)
    else:
        #pick options without using GUI
        try:
            output_tracks = list(
                audiotools.ui.process_output_options(
                    metadata_choices=[limit(c, tracks_to_rip)
                                      for c in metadata_choices],
                    input_filenames=limit(
                        [audiotools.Filename("track%2.2d.cdda.wav" % (i + 1))
                         for i in xrange(cd_track_count)],
                        tracks_to_rip),
                    output_directory=options.dir,
                    format_string=options.format,
                    output_class=AudioType,
                    quality=options.quality,
                    msg=msg,
                    use_default=options.use_default))
        except audiotools.UnsupportedTracknameField, err:
            err.error_msg(msg)
            sys.exit(1)
        except (audiotools.InvalidFilenameFormat,
                audiotools.OutputFileIsInput,
                audiotools.DuplicateOutputFile), err:
            msg.error(unicode(err))
            sys.exit(1)

    #perform actual ripping of tracks from CDDA
    encoded = []
    rip_log = {}
    accuraterip_log = {}

    for (i, (cd_track,
             (output_class,
              output_filename,
              output_quality,
              output_metadata))) in enumerate(zip(limit(cdda,
                                                        tracks_to_rip),
                                                  output_tracks)):
        try:
            audiotools.make_dirs(str(output_filename))
        except OSError, err:
            msg.os_error(err)
            sys.exit(1)

        progress = audiotools.SingleProgressDisplay(
            msg, unicode(output_filename))

        accuraterip_reader = audiotools.accuraterip.AccurateRipReader(cd_track)

        try:
            encoded.append(
                output_class.from_pcm(
                    str(output_filename),
                    audiotools.PCMReaderProgress(
                        accuraterip_reader,
                        cd_track.length() * (44100 / 75),
                        progress.update),
                    output_quality,
                    total_pcm_frames=cd_track.length() * (44100 / 75)))
        except audiotools.EncodingError, err:
            msg.error(_.ERR_ENCODING_ERROR % (output_filename,))
            sys.exit(1)

        encoded[-1].set_metadata(output_metadata)
        progress.clear()

        rip_log[cd_track.track_number] = cd_track.rip_log
        accuraterip_log[cd_track.track_number] = accuraterip_reader.checksum()

        msg.info(
            audiotools.output_progress(
                _.LAB_CD2TRACK_PROGRESS %
                {"track_number": cd_track.track_number,
                 "filename": output_filename}, i + 1, len(output_tracks)))

    cdda.close()

    #add ReplayGain to ripped tracks, if necessary
    if ((audiotools.ADD_REPLAYGAIN and
         (options.add_replay_gain if (options.add_replay_gain is not None)
          else output_class.lossless_replay_gain()) and
         output_class.can_add_replay_gain(encoded))):
        rg_progress = audiotools.ReplayGainProgressDisplay(
            msg, output_class.lossless_replay_gain())
        rg_progress.initial_message()
        try:
            #all audio files must belong to the same album, by definition
            output_class.add_replay_gain([f.filename for f in encoded],
                                         rg_progress.update)
        except ValueError, err:
            rg_progress.clear()
            msg.error(unicode(err))
            sys.exit(1)
        rg_progress.final_message()

    #display ripping log
    msg.output(_.LAB_CD2TRACK_LOG)
    msg.new_row()
    extract_headers = [u"track", u"rderr", u"skip", u"atom",
                       u"edge", u"drop", u"dup", u"drift",
                       _.LAB_ACCURATERIP_CHECKSUM,
                       _.LAB_ACCURATERIP_RESULT]
    extract_keys = ["rderr", "skip", "atom", "edge", "drop", "dup", "drift"]

    dividers = []

    msg.output_column(extract_headers[0])
    dividers.append(u"-")
    for header in extract_headers[1:]:
        msg.output_column(u" ")
        msg.output_column(header, True)
        dividers.append(u" ")
        dividers.append(u"-")

    msg.divider_row(dividers)

    for track_number in sorted(rip_log.keys()):
        msg.new_row()
        msg.output_column(unicode(track_number), True)
        log = rip_log[track_number]
        for key in extract_keys:
            msg.output_column(u" ")
            msg.output_column(unicode(log.get(key, 0)), True)

        track_checksum = accuraterip_log[track_number]
        msg.output_column(u" ")
        msg.output_column(u"%8.8X" % (track_checksum))
        msg.output_column(u" ")
        ar_matches = accuraterip_checksums.get(track_number, [])
        if (len(ar_matches) == 0):
            msg.output_column(_.LAB_ACCURATERIP_NOT_FOUND)
        else:
            for (confidence, ar_checksum, ar_crc2) in ar_matches:
                if (track_checksum == ar_checksum):
                    msg.output_column(
                        _.LAB_ACCURATERIP_CONFIDENCE % (confidence))
                    break
            else:
                msg.output_column(_.LAB_ACCURATERIP_MISMATCH)

    msg.output_rows()
